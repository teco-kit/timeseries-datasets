import pandas as pd
import numpy as np
import os

from data_loaders.dataloader_base import BASE_DATA
# TODO train test split
# ========================================       MotionSense_HAR_DATA               =============================
class MotionSense_HAR_DATA(BASE_DATA):
    """
    MotionSense Dataset
    https://github.com/mmalekzadeh/motion-sense
    https://github.com/mmalekzadeh/motion-sense/blob/master/codes/gen_paper_codes/1_MotionSense_Trial.ipynb

    https://github.com/mmalekzadeh/motion-sense/blob/master/codes/0_import_dataset_and_creat_labeld_time_series.ipynb

    Brief Description of the Dataset:
    ---------------------------------

    This dataset includes time-series data generated by accelerometer and gyroscope sensors 
    (attitude, gravity, userAcceleration, and rotationRate). 
    It is collected with an iPhone 6s kept in the participant's front pocket using SensingKit 
    which collects information from Core Motion framework on iOS devices. 
    All data collected in 50Hz sample rate.

    A total of 24 participants in a range of gender, age, weight, and height 
    performed 6 activities in 15 trials in the same environment and conditions: 

        downstairs, upstairs, walking, jogging, sitting, and standing.

    With this dataset, we aim to look for personal attributes fingerprints in time-series of sensor data, 
    i.e. attribute-specific patterns that can be used to infer gender or personality of the data subjects in addition to their activities.


    There three different folders. Usually, you just need the folder (A) (DeviceMotion), 
    because this folder includes everything that can be captured by both Accelerometer and Gyroscope. 

    DeviceMotion_data
    This folder contains time-series collected by both Accelerometer and Gyroscope for all 15 trials.

    Thus, we have time-series with 12 features:

            attitude.roll
            attitude.pitch
            attitude.yaw
            gravity.x
            gravity.y
            gravity.z
            rotationRate.x
            rotationRate.y
            rotationRate.z
            userAcceleration.x
            userAcceleration.y
            userAcceleration.z


    Labels
        There are 6 different labels:

            dws: downstairs
            ups: upstairs
            sit: sitting
            std: standing
            wlk: walking
            jog: jogging
    """

    def __init__(self, args):
        super(MotionSense_HAR_DATA, self).__init__(args)
        """
        root_path : Root directory of the data set
        difference (bool) : Whether to calculate the first order derivative of the original data
        datanorm_type (str) : Methods of data normalization: "standardization", "minmax" , "per_sample_std", "per_sample_minmax"
        
        spectrogram (bool): Whether to convert raw data into frequency representations
            scales : Depends on the sampling frequency of the data （ UCI 数据的采样频率？？）
            wavelet : Methods of wavelet transformation

        """

        self.used_cols = []  # no use , use the all columns, 
        self.col_names = []  # the original files have column name


        # TODO , There all in total 25 subjects !
        # The original train test is ## We consider long trials as training dataset and short trials as test dataset
        # The use trial to do the train test split
        self.sub_train_test_split = False

        self.train_keys   = [1,2,3,4,7,8,9,10,13,14,15,16,19,20,21,22]

        self.vali_keys    = [5,11,17,23 ]

        self.test_keys    = [6,12,18,24,25]

        self.drop_activities = []

        self.file_encoding = {}  # no use 
        
        self.label_map = [(0, 'dws'), # downstairs
                          (1, "ups"), # upstairs
                          (2, "sit"), # sitting
                          (3, "std"), # standing
                          (4, "wlk"), # walking
                          (5, "jog"), # jogging
                         ] 

        self.labelToId = {int(x[0]): i for i, x in enumerate(self.label_map)}
        self.all_labels = list(range(len(self.label_map)))

        self.drop_activities = [self.labelToId[i] for i in self.drop_activities]
        self.no_drop_activites = [item for item in self.all_labels if item not in self.drop_activities]

        self.read_data()


    def load_the_data(self, root_path):

        trial_codes = {"dws":[1,2,11], "ups":[3,4,12], "wlk":[7,8,15], "jog":[9,16], "sit":[5,13], "std":[6,14]}    

        temp_train_keys = []
        temp_test_keys = []
        temp_vali_keys = []

        df_dict = {}

        for sub in range(1,25):

            for act in ('dws', 'ups', 'wlk', 'jog', 'sit', 'std'):
	
                for trial in trial_codes[act]:

                    fname = os.path.join(root_path,'A_DeviceMotion_data/'+act+'_'+str(trial)+'/sub_'+str(int(sub))+'.csv')
                    sub_data = pd.read_csv(fname)
                    sub_data = sub_data.drop(['Unnamed: 0'], axis=1)

                    sub_data["activity_id"] = act

                    sub_id = "{}_{}_{}".format(sub,act,trial)
                    sub_data["sub_id"] = sub_id

                    df_dict[sub_id] = sub_data

                    if self.sub_train_test_split:

                        if sub in self.train_keys:
                            temp_train_keys.append(sub_id)
                        elif sub in self.vali_keys:
                            temp_vali_keys.append(sub_id)
                        else:
                            temp_test_keys.append(sub_id)
                    else:

                        if trial > 10:
                            temp_test_keys.append(sub_id)
                        else:
                            temp_train_keys.append(sub_id)

        self.train_keys   = temp_train_keys
        self.vali_keys    = temp_vali_keys
        self.test_keys    = temp_test_keys

        df_all = pd.concat(df_dict)

        label_mapping = {item[1]:item[0] for item in self.label_map}
        # because the activity label in the df is not encoded, thet are  'dws', 'ups', 'wlk', 'jog', 'sit', 'std'
        # first, map them in to nummeric number
        df_all["activity_id"] = df_all["activity_id"].map(label_mapping)
        df_all["activity_id"] = df_all["activity_id"].map(self.labelToId)

        # train_vali Test split 
        train_vali = df_all.loc[self.train_keys+self.vali_keys]
        test = df_all.loc[self.test_keys]

        train_vali = train_vali.set_index('sub_id')
        train_vali_label = train_vali.iloc[:,-1]
        train_vali = train_vali.iloc[:,:-1]

        test = test.set_index('sub_id')
        test_label = test.iloc[:,-1]
        test = test.iloc[:,:-1]

        return train_vali, train_vali_label, test, test_label

